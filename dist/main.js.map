{
  "version": 3,
  "sources": ["../src/functions.ts", "../src/main.ts"],
  "sourcesContent": ["import {calcSpirographCoords, SpirographInputs} from './interfaces'\r\n\r\nfunction calcSpirographCoords({r = 0, R = 0, d = 0, angle = 0}: calcSpirographCoords = {}) {\r\n  const radiusDelta = R - r,\r\n        angleRadians = angle / 180 * Math.PI\r\n\r\n  return {\r\n    x: radiusDelta * Math.cos(angleRadians) + d * Math.cos((radiusDelta / r) * angleRadians),\r\n    y: radiusDelta * Math.sin(angleRadians) + d * Math.sin((radiusDelta / r) * angleRadians)\r\n  }\r\n}\r\n\r\nclass Spirograph {\r\n\r\n  scale: number\r\n  r: number\r\n  d: number\r\n  R: number\r\n  angle: number\r\n  x: number\r\n  y: number\r\n  saturation: number\r\n  lightness: number\r\n  alpha: number\r\n  hsla: string\r\n  colorType: number\r\n  step: number\r\n  fps: number\r\n  cnvs: HTMLCanvasElement\r\n  ctx: CanvasRenderingContext2D | null\r\n\r\n  constructor({\r\n    r = 70,\r\n    d = 35,\r\n    R = 20,\r\n    angle = 0,\r\n    saturation = 100,\r\n    lightness = 50,\r\n    alpha = 0.2,\r\n    colorType = 1,\r\n    step = 1,\r\n    fps = 60,\r\n    scale = 1,\r\n    cnvs\r\n  }: SpirographInputs) {\r\n    this.scale = scale\r\n    this.r = r * this.scale\r\n    this.d = d * this.scale\r\n    this.R = R * this.scale\r\n    this.angle = angle\r\n    this.x = 0\r\n    this.y = 0\r\n    this.saturation = saturation\r\n    this.lightness = lightness\r\n    this.alpha = alpha\r\n    this.hsla = `hsla(${this.angle}, ${this.saturation}%, ${this.lightness}%, ${this.alpha})`\r\n    this.colorType = colorType\r\n    this.step = step\r\n    this.fps = fps\r\n    this.cnvs = cnvs\r\n    this.ctx = cnvs.getContext('2d')\r\n  }\r\n\r\n  calcCoords = () => {\r\n\r\n    const {x, y} = calcSpirographCoords({r: this.r, R: this.R, d: this.d, angle: this.angle})\r\n\r\n    this.x = x\r\n    this.y = y\r\n    this.angle += this.step\r\n  }\r\n\r\n  render = () => {\r\n    if(this.ctx === null) return\r\n    this.ctx.beginPath()\r\n    this.ctx.arc(this.x + this.cnvs.width / 2, this.y + this.cnvs.height / 2, 5, 0, Math.PI * 2)\r\n    this.ctx.fillStyle = this.hsla\r\n    this.ctx.fill()\r\n\r\n    if(this.colorType == 1) this.hsla = `hsla(${this.angle}, ${this.saturation}%, ${this.lightness}%, ${this.alpha})`\r\n    // else if(this.colorType == 2) this.hsla = this.hsla\r\n  }\r\n\r\n  clear = () => this.ctx?.clearRect(0, 0, this.cnvs.width, this.cnvs.height)\r\n}\r\n\r\nexport {Spirograph, calcSpirographCoords}", "import {Spirograph} from \"./functions\"\r\n\r\nconst cnvs = document.querySelector<HTMLCanvasElement>('#cnvs'),\r\n      ctx = cnvs?.getContext('2d')\r\n\r\nif(!cnvs) throw new Error('No canvas')\r\n\r\ncnvs.width = innerWidth\r\ncnvs.height = innerHeight\r\n\r\ncnvs.style.width = innerWidth.toString()\r\ncnvs.style.height = innerHeight.toString()\r\n\r\nconst spirograph = new Spirograph({cnvs, fps: 120, step: 1, scale: 2})\r\n\r\nlet spirographRenderLoop: number;\r\n\r\nfunction runSpirographAnimation() {\r\n\r\n  if(spirographRenderLoop !== undefined) clearInterval(spirographRenderLoop)\r\n\r\n  spirographRenderLoop = setInterval(() => {\r\n    spirograph.calcCoords()\r\n    spirograph.render()\r\n\r\n  }, 1000 / spirograph.fps)\r\n}\r\n\r\nrunSpirographAnimation()\r\n\r\nconst settingsContainer = document.querySelector<HTMLElement>('.settings-container'),\r\n      tab_btn = document.querySelector<HTMLElement>('#tab-btn'),\r\n      clear_btn = document.querySelector<HTMLElement>('#clear-btn'),\r\n      spirographSpeed_inpt = document.querySelector<HTMLElement>('#spirographSpeed'),\r\n      scale_inpt = document.querySelector<HTMLElement>('#scale'),\r\n      radiusR_inpt = document.querySelector<HTMLInputElement>('#radiusR'),\r\n      radius_inpt = document.querySelector<HTMLInputElement>('#radius'),\r\n      distanceR_inpt = document.querySelector<HTMLInputElement>('#distanceR'),\r\n      distance_inpt = document.querySelector<HTMLInputElement>('#distance'),\r\n      RadiusR_inpt = document.querySelector<HTMLInputElement>('#RadiusR'),\r\n      Radius_inpt = document.querySelector<HTMLInputElement>('#Radius'),\r\n      spirographStepR_inpt = document.querySelector<HTMLInputElement>('#spirographStepR'),\r\n      spirographStep_inpt = document.querySelector<HTMLInputElement>('#spirographStep'),\r\n      spirographColor_inpt = document.querySelector<HTMLInputElement>('#spirographColor')\r\n\r\n\r\n\r\nif(tab_btn) tab_btn.onclick = () => {\r\n  if(settingsContainer?.style.display === 'none') {\r\n    settingsContainer.style.display = 'flex'\r\n  } else {\r\n    settingsContainer && (settingsContainer.style.display = 'none')\r\n  }\r\n}\r\nclear_btn && (clear_btn.onclick = spirograph.clear)\r\n\r\nif(spirographSpeed_inpt) spirographSpeed_inpt.onchange = (e: any) => {  \r\n  spirograph.fps = +e.target.value\r\n  runSpirographAnimation()\r\n}\r\n\r\nfunction syncInputs(spinerHTMLInputElement: HTMLInputElement, inputHTMLInputElement: HTMLInputElement, spirographProp: 'r' | 'R' | 'd' | 'step') {\r\n\r\n  spinerHTMLInputElement.addEventListener('input', event => {\r\n    \r\n    if(event.target instanceof HTMLInputElement) {\r\n      const value = +event.target.value\r\n\r\n      spirograph[spirographProp] = value * spirograph.scale\r\n      inputHTMLInputElement.value = value.toString()\r\n    }\r\n  })\r\n\r\n  inputHTMLInputElement.addEventListener('change', event => {\r\n    \r\n    if(event.target instanceof HTMLInputElement) {\r\n      const value = +event.target.value\r\n\r\n      spirograph[spirographProp] = value * spirograph.scale\r\n      spinerHTMLInputElement.value = value.toString()\r\n    }\r\n  })\r\n}\r\n\r\nradiusR_inpt && radius_inpt && syncInputs(radiusR_inpt, radius_inpt, 'r')\r\ndistanceR_inpt && distance_inpt && syncInputs(distanceR_inpt, distance_inpt, 'd')\r\nRadiusR_inpt && Radius_inpt && syncInputs(RadiusR_inpt, Radius_inpt, 'R')\r\nspirographStepR_inpt && spirographStep_inpt && syncInputs(spirographStepR_inpt, spirographStep_inpt, 'step')\r\n\r\nif(spirographColor_inpt) spirographColor_inpt.onchange = event => {  \r\n  if(event.target instanceof HTMLInputElement) {\r\n\r\n    spirograph.hsla = event.target.value\r\n    spirograph.colorType = 2\r\n  }\r\n}"],
  "mappings": "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",
  "names": ["calcSpirographCoords", "r", "R", "d", "angle", "radiusDelta", "angleRadians", "Spirograph", "saturation", "lightness", "alpha", "colorType", "step", "fps", "scale", "cnvs", "x", "y", "_a", "cnvs", "ctx", "spirograph", "Spirograph", "spirographRenderLoop", "runSpirographAnimation", "settingsContainer", "tab_btn", "clear_btn", "spirographSpeed_inpt", "scale_inpt", "radiusR_inpt", "radius_inpt", "distanceR_inpt", "distance_inpt", "RadiusR_inpt", "Radius_inpt", "spirographStepR_inpt", "spirographStep_inpt", "spirographColor_inpt", "e", "syncInputs", "spinerHTMLInputElement", "inputHTMLInputElement", "spirographProp", "event", "value"]
}
